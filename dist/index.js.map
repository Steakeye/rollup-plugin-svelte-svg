{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["import { extname } from \"path\";\nimport { platform } from \"os\";\n\nimport { createFilter } from \"rollup-pluginutils\";\nimport Svelte from \"svelte/compiler\";\n\n// Possible values are 'aix', 'darwin', 'freebsd', 'linux', 'openbsd', 'sunos', and 'win32'.\n// https://nodejs.org/api/os.html#os_os_platform\nconst isWindows = platform() === \"win32\";\n\nconst head = xs => xs[0];\nconst tail = xs => xs[xs.length - 1];\n\nconst validJS = /[a-zA-Z_$][0-9a-zA-Z_$]*/;\n\nconst toJSClass = text =>\n\thead(tail(text.split(isWindows ? \"\\\\\" : \"/\")).split(\".\"))\n\t\t.split(\"-\")\n\t\t// Uppercase first character of every segment after splitting out hyphens\n\t\t.map(segment => (segment ? segment[0].toUpperCase() + segment.slice(1) : segment))\n\t\t.join(\"\")\n\t\t// split into characters\n\t\t.split(\"\")\n\t\t// drop potentially unsafe characters\n\t\t.map(x => (validJS.test(x) ? x : \"\"))\n\t\t.join(\"\");\n\nconst svgRegex = /(<svg.*?)(>.*)/s;\n\nexport function svelteSVG(options = {}) {\n\tconst filter = createFilter(options.include, options.exclude);\n\n\treturn {\n\t\tname: \"svg\",\n\n\t\ttransform(source, id) {\n\t\t\tif (!filter(id) || extname(id) !== \".svg\") {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tsource = decodeURIComponent(source);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.warn(`${id} could not be decoded`, e);\n\t\t\t}\n\n\t\t\tconst parts = svgRegex.exec(source);\n\t\t\tif (!parts) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"svg file did not start with <svg> tag. Unable to convert to Svelte component\"\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst [, svgStart, svgBody] = parts;\n\t\t\tconst content = `${svgStart} {...$$props}${svgBody}`;\n\n\t\t\tconst {\n\t\t\t\tjs: { code, map },\n\t\t\t} = Svelte.compile(content, {\n\t\t\t\tfilename: id,\n\t\t\t\tname: toJSClass(id),\n\t\t\t\tformat: \"esm\",\n\t\t\t\tgenerate: options.generate,\n\t\t\t\thydratable: true,\n\t\t\t\tdev: options.dev,\n\t\t\t});\n\n\t\t\treturn { code, map };\n\t\t},\n\t};\n}\n"],"names":["platform","createFilter","extname","Svelte"],"mappings":"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"}